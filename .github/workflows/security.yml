name: Security Scanning

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
  schedule:
    # Run weekly on Mondays at 9am UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  gitleaks:
    name: Gitleaks Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for comprehensive scanning

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Organizations, not personal accounts.
        with:
          args: --verbose --redact

  trufflehog:
    name: TruffleHog Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  detect-secrets:
    name: Detect Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Run detect-secrets scan
        run: |
          detect-secrets scan --all-files --force-use-all-plugins

  dependency-check:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Check Python dependencies with Safety
        run: |
          pip install safety
          # Check backend dependencies for known vulnerabilities
          cd backend-canvas-fastapi
          safety check --json || true
        continue-on-error: true  # Don't fail build on vulnerabilities, just report

  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    if: github.repository_security_and_analysis.advanced_security.status == 'enabled'
    strategy:
      matrix:
        language: ['python', 'javascript']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [gitleaks, trufflehog, detect-secrets, dependency-check, codeql]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "Security scanning complete"
          echo "Gitleaks: ${{ needs.gitleaks.result }}"
          echo "TruffleHog: ${{ needs.trufflehog.result }}"
          echo "Detect-secrets: ${{ needs.detect-secrets.result }}"
          echo "Dependency check: ${{ needs.dependency-check.result }}"
          echo "CodeQL: ${{ needs.codeql.result }}"

      - name: Notify on failure
        if: |
          needs.gitleaks.result == 'failure' ||
          needs.trufflehog.result == 'failure' ||
          needs.detect-secrets.result == 'failure'
        run: |
          echo "⚠️ Security issues detected! Please review the scan results."
          exit 1
