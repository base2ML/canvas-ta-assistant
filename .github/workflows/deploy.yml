name: Build and Deploy to AWS

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: canvas-ta-dashboard
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Or your project's Node version

      - name: Install frontend dependencies
        run: |
          cd canvas-react
          npm install
      - name: Build frontend
        run: |
          cd canvas-react
          npm run build

      - name: Build Docker image
        run: |
          docker build -t vibey-canvas:latest .
          docker tag vibey-canvas:latest ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker tag vibey-canvas:latest ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Push image to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to ECS (if task definition exists)
        if: github.ref == 'refs/heads/production'
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_NAME }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE_NAME }}
          TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
        run: |
          # Update task definition with new image
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION)
          NEW_TASK_DEF=$(echo $TASK_DEFINITION_JSON | jq --arg IMAGE "${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" \
            '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

          # Register new task definition
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF")
          NEW_REVISION=$(echo $NEW_TASK_INFO | jq -r '.taskDefinition.revision')

          # Update ECS service
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEFINITION:$NEW_REVISION

          echo "Deployed revision $NEW_REVISION to ECS"

      - name: Summary
        run: |
          echo "### Deployment Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: \`${{ env.ECR_REPOSITORY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: \`${{ env.IMAGE_TAG }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Also Tagged**: \`latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region**: \`${{ env.AWS_REGION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Image pushed to Amazon ECR successfully" >> $GITHUB_STEP_SUMMARY
