name: Terraform Infrastructure

on:
  push:
    branches:
      - main
      - production
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
      - production
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action || 'plan' }}
    runs-on: ubuntu-latest

    # Set environment based on branch or manual input
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/production' && 'production') || (github.ref == 'refs/heads/main' && 'staging') || 'dev' }}

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/production" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file=environments/${{ steps.env.outputs.environment }}.tfvars \
            -out=tfplan \
            -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Environment: \`${{ steps.env.outputs.environment }}\`*
            *Pushed by: @${{ github.actor }}*
            *Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: |
          (github.event.inputs.action == 'apply' ||
           (github.event_name == 'push' && github.ref == 'refs/heads/production')) &&
          steps.plan.outcome == 'success'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform destroy \
            -var-file=environments/${{ steps.env.outputs.environment }}.tfvars \
            -auto-approve

      - name: Terraform Output
        if: steps.plan.outcome == 'success' || steps.apply.outcome == 'success'
        id: output
        run: terraform output -json

      - name: Summary
        if: always()
        run: |
          echo "### Terraform Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ steps.env.outputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: \`${{ github.event.inputs.action || 'plan' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Format**: \`${{ steps.fmt.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Init**: \`${{ steps.init.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Validate**: \`${{ steps.validate.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Plan**: \`${{ steps.plan.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.action }}" == "apply" ] || [ "${{ github.event_name }}" == "push" ]; then
            echo "‚úÖ Terraform changes have been applied" >> $GITHUB_STEP_SUMMARY
          else
            echo "üìã Terraform plan completed" >> $GITHUB_STEP_SUMMARY
          fi
