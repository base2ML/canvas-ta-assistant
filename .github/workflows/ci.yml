name: CI/CD Pipeline

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

permissions:
  contents: read
  pull-requests: write

jobs:
  backend-tests:
    name: Backend Tests (Python)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      contains(github.event.head_commit.modified, 'main.py') ||
      contains(github.event.head_commit.modified, 'pyproject.toml') ||
      contains(github.event.head_commit.added, 'main.py') ||
      contains(github.event.head_commit.added, 'pyproject.toml')
    defaults:
      run:
        working-directory: ./backend-canvas-fastapi

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV package manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync

      - name: Lint and format check with Ruff
        run: |
          # Check linting
          uv run ruff check . --output-format=github
          # Check formatting
          uv run ruff format --check .

      - name: Type check with mypy
        run: |
          uv run mypy . --ignore-missing-imports || true

      - name: Run tests with pytest
        run: |
          uv run pytest --cov=. --cov-report=xml --cov-report=term
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend-canvas-fastapi/coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

  frontend-tests:
    name: Frontend Tests (React)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      contains(github.event.head_commit.modified, 'canvas-react') ||
      contains(github.event.head_commit.added, 'canvas-react')
    defaults:
      run:
        working-directory: ./canvas-react

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: canvas-react/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint with ESLint
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          VITE_BACKEND_URL: ''
          VITE_CANVAS_API_URL: ''
          VITE_CANVAS_API_KEY: ''
          VITE_CANVAS_COURSE_ID: ''

      - name: Run tests
        run: npm test -- --passWithNoTests
        continue-on-error: true

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' ||
      contains(github.event.head_commit.modified, 'Dockerfile') ||
      contains(github.event.head_commit.modified, 'main.py') ||
      contains(github.event.head_commit.modified, 'canvas-react')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: cda-ta-dashboard:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  pre-commit-hooks:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pre-commit
        run: |
          pip install pre-commit

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files
        continue-on-error: true

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build, pre-commit-hooks]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "CI Pipeline Summary:"
          echo "Backend tests: ${{ needs.backend-tests.result }}"
          echo "Frontend tests: ${{ needs.frontend-tests.result }}"
          echo "Docker build: ${{ needs.docker-build.result }}"
          echo "Pre-commit hooks: ${{ needs.pre-commit-hooks.result }}"

      - name: Report status
        if: |
          needs.backend-tests.result == 'failure' ||
          needs.frontend-tests.result == 'failure' ||
          needs.docker-build.result == 'failure'
        run: |
          echo "‚ùå Some CI checks failed. Please review the logs."
          exit 1
